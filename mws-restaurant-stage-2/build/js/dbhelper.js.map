{"version":3,"sources":["dbhelper.js"],"names":["offlineMessage","document","getElementById","noDataMessage","dataSavedMessage","saveErrorMessage","DBHelper","getAlternativeText","id","altTexts","messageOffline","lastUpdated","getLastUpdated","textContent","style","display","messageNoData","messageDataSaved","messageSaveError","localStorage","getItem","setLastUpdated","date","setItem","logResult","result","console","log","logError","error","validateResponse","response","ok","Error","statusText","readResponseAsJSON","json","DATABASE_URL","port","getServerData","pathToResource","fetch","then","getRestaurantURL","restaurant","getImageUrlForRestaurant","imageType","width","fileExtension","addMarkerForRestaurant","map","marker","google","maps","Marker","position","latlng","title","name","url","animation","Animation","DROP"],"mappings":"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","file":"dbhelper.js","sourcesContent":["const offlineMessage = document.getElementById('offline');\nconst noDataMessage = document.getElementById('no-data');\nconst dataSavedMessage = document.getElementById('data-saved');\nconst saveErrorMessage = document.getElementById('save-error');\n\n\n/**\n * DBHelper provides functions to interact with the local development API server\n * provided by Udacity for project 2.\n * https://github.com/udacity/mws-restaurant-stage-2\n * curl \"http://localhost:1337/restaurants\"\n * curl \"http://localhost:1337/restaurants/{3}\"\n */\n\nclass DBHelper {\n\n  /**\n   * Alternative Text as the API server doesn't provide it.\n   */\n  static getAlternativeText(id) {\n    const altTexts = {\n      1: \"Interior of Mission Chinese Food\",\n      2: \"Emily's Pizza Quattro Formaggi\",\n      3: \"Interior of Kang Ho Dong Baekjeong\",\n      4: \"Outside view of Katz's Delicatessen at night\",\n      5: \"Open kitchen of Roberta's Pizza\",\n      6: \"People queueing at Hometown BBQ\",\n      7: \"Outside view of Superiority Burger\",\n      8: \"Outside view of The Dutch\",\n      9: \"People eating at Mu Ramen\",\n      10: \"Interior of Casa Enrique\"\n    };\n    return altTexts[id];\n  }\n\n  // Alert user that data may not be current\n  // \"You're offline and viewing stored data.\"\n  static messageOffline() {\n    const lastUpdated = this.getLastUpdated();\n    if (lastUpdated) {\n     offlineMessage.textContent += ' Last fetched server data: ' + lastUpdated;\n    }\n    offlineMessage.style.display = 'block';\n  }\n\n  // Alert user that there is no data available.\n  // \"You're offline and local data is unavailable.\"\n  static messageNoData() {\n    //\n    noDataMessage.style.display = 'block';\n  }\n\n  // Alert user that data has been saved for offline.\n  // \"Server data was saved for offline mode.\"\"\n  static messageDataSaved() {\n    const lastUpdated = this.getLastUpdated();\n    if (lastUpdated) {dataSavedMessage.textContent += ' on ' + lastUpdated;}\n    dataSavedMessage.style.display = 'block';\n  }\n\n  // Alert user that data couldn't be saved offline\n  // \"Server data couldn't be saved offline.\"\"\n  static messageSaveError() {\n    saveErrorMessage.style.display = 'block';\n  }\n\n  // Util network function.\n  static getLastUpdated() {\n    return localStorage.getItem('lastUpdated');\n  }\n\n  // Util network function.\n  static setLastUpdated(date) {\n    localStorage.setItem('lastUpdated', date);\n  }\n\n  /*\n   * logResult is available for debugging puprposes, it does some logging\n   * of the JSON data.\n   */\n  static logResult(result) {\n    console.log(result);\n  }\n\n  /*\n   * The fetch call returns a promise that resolves to a response object.\n   * If the request does not complete, .catch takes over and is passed the\n   * corresponding error.\n   */\n  static logError(error) {\n    console.log('[ERROR] Looks like there was a problem: \\n', error);\n  }\n\n  /*\n   * validateResponse checks if the response is valid (is it a 200-299?).\n   * If it isn't, an error is thrown, skipping the rest of the then blocks and\n   * triggering the catch block. Without this check bad responses are passed\n   * down the chain and could break later code that may rely on receiving\n   * a valid response. If the response is valid, it is passed to\n   * readResponseAsJSON.\n   * TODO: respond with custom pages for different errors or handle other\n   * responses that are not ok (i.e., not 200-299), but still usable\n   * (e.g., status codes in the 300 range)\n   */\n  static validateResponse(response) {\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n    return response;\n  }\n\n  /*\n   * readResponseAsJSON reads the body of the response using the Response.json()\n   * method. This method returns a promise that resolves to JSON. Once this\n   * promise resolves, the JSON data is passed to logResult.\n   */\n  static readResponseAsJSON(response) {\n    return response.json();\n  }\n\n  /**\n   * Get the database URL.\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\n   */\n  static get DATABASE_URL() {\n    const port = 1337;\n    return `http://localhost:${port}`;\n  }\n\n  /**\n   * getServerData\n   */\n  static getServerData(pathToResource) {\n    // Fetch is called on a resource and Fetch returns a promise that will\n    // resolve to a response object. When the promise resolves, the response\n    // object is passed to validateResponse.\n    return fetch(pathToResource)\n      .then(this.validateResponse)\n      .then(this.readResponseAsJSON)\n      // Once the promise resolves, the JSON data is passed to logResult.\n      // .then(this.logResult)\n      // .catch(this.logError);\n  }\n\n  /**\n   * Returns the relative url for a restaurant.\n   */\n  static getRestaurantURL(restaurant) {\n    // return `./restaurant.html?id=${restaurant.id}`\n    return `restaurant.html?id=${restaurant.id}`\n  }\n\n  /**\n   * Returns the restaurant image URL.\n   * Using id to construct urls as the local development API server doesn't\n   * always have a photograph field.\n   * jpg is default image type.\n   * 800 is default width.\n   */\n  static getImageUrlForRestaurant(restaurant, imageType, width) {\n    // Default image type is jpeg.\n    let fileExtension = 'jpg';\n    switch (imageType) {\n      case 'jpeg':\n        break;\n      case 'webp':\n        fileExtension = 'webp';\n        break;\n      default:\n        console.log(`[DEBUG] unhandled imageType: ${imageType}`);\n    }\n    if (typeof width !== 'undefined') {\n      return `img/${restaurant.id}_w_${width}.${fileExtension}`;\n    } else {\n      return `img/${restaurant.id}_w_800.${fileExtension}`;\n    }\n  }\n\n  /**\n   * Add a Google Maps marker for a restaurant.\n   */\n  static addMarkerForRestaurant(restaurant, map) {\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.getRestaurantURL(restaurant),\n      map: map,\n      animation: google.maps.Animation.DROP}\n    );\n    return marker;\n  }\n\n}\n"]}