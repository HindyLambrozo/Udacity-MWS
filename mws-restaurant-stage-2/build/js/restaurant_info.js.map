{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","elementBreadcrumb","document","getElementById","elementCardPrimary","elementRestaurantName","elementRestaurantAddress","elementRestaurantCuisine","elementRestaurantHours","elementGoogleMap","elementReviewsContainer","elementReviewsList","window","initMap","id","getParameterByName","loadRestaurantNetworkFirst","endpointRestaurantById","DBHelper","getServerData","then","dataFromNetwork","self","updateRestaurantUI","createBreadcrumb","saveRestaurantsDataLocally","setLastUpdated","Date","catch","err","console","warn","createGoogleMaps","log","getLocalRestaurantByIdData","offlineData","loc","lat","lng","google","maps","Map","center","zoom","addMarkerForRestaurant","setTitle","iFrameGoogleMaps","querySelector","setAttribute","addListener","picture","createResponsivePicture","parentElement","parentNode","insertBefore","innerHTML","name","tabIndex","address","cuisine_type","operating_hours","updateRestaurantHoursUI","updateReviewsUI","operatingHours","key","row","createElement","className","day","appendChild","time","reviews","title","noReviews","forEach","review","createReviewHTML","li","divCardPrimary","date","divCardActions","rating","append","divCardSecondary","comments","url","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","sizes","srcsetWebP","getImageUrlForRestaurant","srcsetJPEG","sourceWebP","srcset","type","sourceDefault","defaultImg","imageSrc","src","altText","getAlternativeText","alt"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["/**\n * TODO: Add to Home Screen (aka Web App Install Banners)\n * trigger the Add to Home Screen prompt by using the beforeinstallprompt event.\n * https://developers.google.com/web/fundamentals/app-install-banners/\n */\n\n// Declare global variables.\nlet map;\nlet restaurant;\n\n// Declare the id elements.\nconst elementBreadcrumb = document.getElementById('breadcrumb');\nconst elementCardPrimary = document.getElementById('card-primary');\nconst elementRestaurantName = document.getElementById('restaurant-name');\nconst elementRestaurantAddress = document.getElementById('restaurant-address');\nconst elementRestaurantCuisine = document.getElementById('restaurant-cuisine');\nconst elementRestaurantHours = document.getElementById('restaurant-hours');\nconst elementGoogleMap = document.getElementById('map');\nconst elementReviewsContainer = document.getElementById('reviews-container');\nconst elementReviewsList = document.getElementById('reviews-list');\n\n\n/**\n * Initialize Google map, called from HTML.\n * https://developers.google.com/maps/documentation/javascript/tutorial\n */\nwindow.initMap = () => {\n  // Fetch restaurant by using url parameter on current page.\n  const id = getParameterByName('id');\n  loadRestaurantNetworkFirst(id);\n}\n\n/**\n * Fetch a restaurant by its ID from network and fallback to IndexedDB,\n * update UI.\n */\nconst loadRestaurantNetworkFirst = (id) => {\n  const endpointRestaurantById = `http://localhost:1337/restaurants/${id}`;\n  DBHelper.getServerData(endpointRestaurantById)\n  .then(dataFromNetwork => {\n    self.restaurant = dataFromNetwork;\n    updateRestaurantUI();\n    createBreadcrumb();\n    saveRestaurantsDataLocally(dataFromNetwork)\n    .then(() => {\n      DBHelper.setLastUpdated(new Date());\n      // DBHelper.messageDataSaved();\n    }).catch(err => {\n      // DBHelper.messageSaveError();\n      console.warn(err);\n    });\n    createGoogleMaps();\n  }).catch(err => {\n    console.log('[DEBUG] Network requests have failed, this is expected if offline');\n    getLocalRestaurantByIdData(id)\n    .then(offlineData => {\n      // DBHelper.messageOffline();\n      self.restaurant = offlineData;\n      updateRestaurantUI();\n      createBreadcrumb();\n      createGoogleMaps();\n    }).catch(err => {\n      // DBHelper.messageNoData();\n      console.warn(err);\n    });\n  });\n}\n\nconst createGoogleMaps = () => {\n  let loc = {lat: 40.722216, lng: -73.987501};\n  // Not using scrollwheel: False anymore, using default gestureHandling: auto\n  // https://developers.google.com/maps/documentation/javascript/interaction\n  // self.map = new google.maps.Map(elementGoogleMap, {\n  map = new google.maps.Map(elementGoogleMap, {\n    // center: restaurant.latlng,\n    center: loc,\n    zoom: 12\n  });\n  DBHelper.addMarkerForRestaurant(self.restaurant, self.map);\n  // a11y - Frames must have non-empty title attribute\n  // https://dequeuniversity.com/rules/axe/2.2/frame-title\n  // https://developers.google.com/maps/documentation/javascript/events\n  let setTitle = () => {\n    const iFrameGoogleMaps = document.querySelector('#map iframe');\n    iFrameGoogleMaps.setAttribute('title', 'Google Maps overview of restaurants');\n  }\n  // self.map.addListener('tilesloaded', setTitle);\n  map.addListener('tilesloaded', setTitle);\n};\n\n/**\n * Create restaurant details, update operating hours and the review cards.\n */\nconst updateRestaurantUI = () => {\n  // There is no insertAfter method. It can be emulated by combining the\n  // insertBefore method with nextSibling.\n  const picture = createResponsivePicture(self.restaurant);\n  // A reference to card-primary is needed before we can insert the element.\n  // Get a reference to the parent element.\n  const parentElement = elementCardPrimary.parentNode;\n  // console.log(parentElement);\n  // Insert the new element into the DOM before elementCardPrimary.\n  parentElement.insertBefore(picture, elementCardPrimary);\n\n  elementRestaurantName.innerHTML = self.restaurant.name;\n  elementRestaurantName.tabIndex = '0';\n\n  elementRestaurantAddress.innerHTML = self.restaurant.address;\n\n  elementRestaurantCuisine.innerHTML = self.restaurant.cuisine_type;\n\n  if (restaurant.operating_hours) {\n    updateRestaurantHoursUI();\n  }\n  updateReviewsUI();\n}\n\n/**\n * Create table data with restaurant operating hours.\n */\nconst updateRestaurantHoursUI = () => {\n  let operatingHours = self.restaurant.operating_hours;\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n    row.className = 'restaurant-card-table-content';\n    row.tabIndex = '0';\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    elementRestaurantHours.appendChild(row);\n  }\n}\n\n/**\n * Create reviews cards.\n */\nconst updateReviewsUI = (reviews = self.restaurant.reviews) => {\n  const title = document.createElement('h3');\n  title.className = 'reviews-title';\n  title.innerHTML = 'Reviews';\n  elementReviewsContainer.appendChild(title);\n\n  // TODO: test with no reviews.\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    elementReviewsContainer.appendChild(noReviews);\n    return;\n  }\n\n  reviews.forEach(review => {\n    elementReviewsList.appendChild(createReviewHTML(review));\n  });\n  elementReviewsContainer.appendChild(elementReviewsList);\n}\n\n/**\n * Create a review card.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  li.className = 'review-card';\n\n  // Create a div with class card-primary that contains h2, h3.\n  const divCardPrimary = document.createElement('div');\n  divCardPrimary.className = 'card-primary';\n  // Restaurant name.\n  const name = document.createElement('h2');\n  name.className = 'card-title';\n  name.innerHTML = review.name;\n  divCardPrimary.appendChild(name);\n  // Review date.\n  const date = document.createElement('h3');\n  date.className = 'card-subtitle';\n  date.innerHTML = review.date;\n  divCardPrimary.appendChild(date);\n  li.appendChild(divCardPrimary);\n\n  // Create a div with class review-card-rating.\n  const divCardActions = document.createElement('div');\n  divCardActions.className = 'review-card-rating';\n  const rating = document.createElement('p');\n  rating.className = 'review-card-rating-content';\n  rating.innerHTML = `Rating: ${review.rating}`;\n  divCardActions.append(rating);\n  li.appendChild(divCardActions);\n\n  // Create a div with class card-secondary that contains further content.\n  const divCardSecondary = document.createElement('div');\n  divCardSecondary.className = 'card-secondary';\n  // Review text.\n  const comments = document.createElement('p');\n  comments.className = 'card-secondary-content';\n  comments.innerHTML = review.comments;\n  divCardSecondary.appendChild(comments);\n  li.appendChild(divCardSecondary);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu.\n */\nconst createBreadcrumb = (restaurant=self.restaurant) => {\n  const li = document.createElement('li');\n  li.className = 'breadcrumb';\n  li.innerHTML = restaurant.name;\n  // a11y - indicate current page\n  // https://www.w3.org/TR/wai-aria-practices/examples/breadcrumb/index.html -->\n  li.setAttribute('aria-current', 'page');\n  elementBreadcrumb.appendChild(li);\n}\n\n/**\n * Get an URL parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\n/**\n * Create a responsive image.\n *\n * Main page\n * 0 to 479px: card has width 100%, so 1 img 100% (455 x 321).\n * 480 to 599px: card has width 100%, so 1 img fullwidth (567 x 425).\n * 600 to 839px: card has width 45%, so 2 img 45% (378 x 283).\n * 840 to 959px: card has width 45%, so 2 img 45% (432 x 324).\n * 960 to 1279px: card has width 30%, so 3 img 30% (384 x 289).\n * 1280px to x: card has width 22.5%, so 4 img 22.5% (minimum 288 x 216).\n *\n * Restaurant Info\n * 0 to 479px: card has width 100%, so 1 img 100% (479 x 359).\n * 480 to 599px: card has width 100%, so 1 img fullwidth (599 x 449).\n * 600 to 839px: card has width 50%, so 1 img 50% (419.5 x 315).\n * 840 to 959px: card has width 50%, so 1 img 50% (479.5 x 360).\n * 960 to 1279px: card has width 50%, so 1 img 50% (639.5 x 480).\n * 1280px to x: card has width 50%, so 1 img 50% (minimum 640 x 480).\n *\n * Image breakpoints have been determined using the Cloudinary generator.\n * http://www.responsivebreakpoints.com/\n * Image widths are 300, 433, 552, 653, 752, 800\n *\n * The srcset attribute gives the browser the option to choose which file\n * to use. However, the browser has no way of determining the file sizes before\n * it loads them, so it always chooses the first image in the list.\n *\n * To load the correct image size based on the viewport width we need to tell\n * the browser how big each file is before it fetches them.\n * By adding a width descriptor to each file in the srcset, we are telling\n * the browser the width of each image in pixels before it fetches the image.\n * The browser can then use these widths to decide which image to fetch based\n * on its window size. It fetches the image with the smallest width that is\n * still larger than the viewport width.\n *\n * Because the CSS is parsed after the HTML at runtime, the browser has no way\n * to know what the final display size of the image will be when it fetches it.\n * Unless we tell it otherwise, the browser assumes the images will be displayed\n * at 100% of the viewport width and fetches the images based on this.\n *\n * The sizes value matches the image's max-width value in the CSS. The browser\n * now has everything it needs to choose the correct image version. The browser\n * knows its own viewport width and the pixel density of the user's device,\n * and we have given it the source files' dimensions (using width descriptor)\n * and the image sizes relative to the viewport (the sizes attribute).\n *\n * The media query tests the viewport width of the screen, and applies the CSS.\n * We can tell the browser about the media query in the sizes attribute so that\n * it fetches the correct image when the image changes size.\n *\n * We can use the <picture> element and the <source> element, in combination\n * with media queries, to change the image source as the window is resized.\n *\n * The <picture> element lets us define multiple source files using the\n * <source> tag. This is different than simply using an <img> tag with the\n * srcset attribute because the source tag lets us add things like media queries\n * to each set of sources. Instead of giving the browser the image sizes and\n * letting it decide which files to use, we can define the images to use at\n * each window size.\n *\n * If the user's browser doesn't support the <picture> element, it fetches\n * whatever is in the <img> element. The <picture> element is just used to\n * specify multiple sources for the <img> element contained in it. The <img>\n * element is what displays the image.\n *\n * Display density descriptors are great for fixed width images, but are\n * insufficient for flexible images.\n */\nconst createResponsivePicture = (restaurant) => {\n  const picture = document.createElement('picture');\n\n  // sizes: the browser ignores everything after the first matching condition.\n  const sizes = '(max-width: 37.4375rem) 100vw, (min-width: 37.5rem) 50vw, 100vw';\n\n  // srcset\n  const srcsetWebP =\n    `${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 300)} 300w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 433)} 433w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 552)} 552w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 653)} 653w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 752)} 752w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 800)} 800w`;\n\n  const srcsetJPEG =\n    `${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 300)} 300w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 433)} 433w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 552)} 552w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 653)} 653w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 752)} 752w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 800)} 800w`;\n\n  const sourceWebP = document.createElement('source');\n  sourceWebP.srcset = srcsetWebP;\n  sourceWebP.sizes = sizes;\n  sourceWebP.type = 'image/webp';\n  picture.appendChild(sourceWebP);\n\n  const sourceDefault = document.createElement('source');\n  sourceDefault.srcset = srcsetJPEG;\n  sourceDefault.sizes = sizes;\n  sourceDefault.type = 'image/jpeg';\n  picture.appendChild(sourceDefault);\n\n  const defaultImg = document.createElement('img');\n  // Get default image which should be width 800.\n  const imageSrc = DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 800);\n  defaultImg.src = imageSrc;\n\n  let altText = DBHelper.getAlternativeText(restaurant.id);\n  if (!altText) {\n    altText = `Restaurant ${restaurant.name}`;\n  }\n  defaultImg.alt = altText;\n  // defaultImg.setAttribute('tabindex', '0');\n  defaultImg.tabIndex = '0';\n  picture.appendChild(defaultImg);\n\n  return picture;\n}\n"]}