{"version":3,"sources":["idb.js"],"names":["createIndexedDB","window","console","log","idb","open","upgradeDb","oldVersion","objectStoreNames","contains","restaurantsOS","createObjectStore","keyPath","dbPromise","saveRestaurantsDataLocally","restaurants","then","db","tx","transaction","store","objectStore","length","Promise","all","map","restaurant","put","catch","abort","Error","getLocalRestaurantsData","getAll","getLocalRestaurantByIdData","id","get","parseInt"],"mappings":"AAAA;;;;AAIA;AACA,SAASA,eAAT,GAA2B;AACzB;AACA,MAAI,EAAE,eAAeC,MAAjB,CAAJ,EAA8B;AAC5BC,YAAQC,GAAR,CAAY,iDAAZ;AACA,WAAO,IAAP;AACD;AACD;AACA,SAAOC,IAAIC,IAAJ,CAAS,eAAT,EAA0B,CAA1B,EAA6B,UAASC,SAAT,EAAoB;AACtD,YAAQA,UAAUC,UAAlB;AACE,WAAK,CAAL;AACE;AACA;AACA;AACF,WAAK,CAAL;AACE;AACA;AACA;AACA;AACA,YAAI,CAACD,UAAUE,gBAAV,CAA2BC,QAA3B,CAAoC,aAApC,CAAL,EAAyD;AACvDP,kBAAQC,GAAR,CAAY,sDAAZ;AACA,gBAAMO,gBACJJ,UAAUK,iBAAV,CAA4B,aAA5B,EAA2C,EAACC,SAAS,IAAV,EAA3C,CADF;AAED;AACH,WAAK,CAAL;AACE;AACA,YAAI,CAACN,UAAUE,gBAAV,CAA2BC,QAA3B,CAAoC,SAApC,CAAL,EAAqD;AACnDP,kBAAQC,GAAR,CAAY,kDAAZ;AACA,gBAAMO,gBACJJ,UAAUK,iBAAV,CAA4B,SAA5B,EAAuC,EAACC,SAAS,IAAV,EAAvC,CADF;AAED;AArBL;AAuBD,GAxBM,CAAP;AAyBD;;AAED;AACA,MAAMC,YAAYb,iBAAlB;;AAEA;;;;;;;;;AASA,SAASc,0BAAT,CAAoCC,WAApC,EAAiD;AAC/C,MAAI,EAAE,eAAed,MAAjB,CAAJ,EAA8B;AAAC,WAAO,IAAP;AAAa;AAC5C,SAAOY,UAAUG,IAAV,CAAeC,MAAM;AAC1B,UAAMC,KAAKD,GAAGE,WAAH,CAAe,aAAf,EAA8B,WAA9B,CAAX;AACA,UAAMC,QAAQF,GAAGG,WAAH,CAAe,aAAf,CAAd;AACA;AACA,QAAIN,YAAYO,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,aAAOC,QAAQC,GAAR,CAAYT,YAAYU,GAAZ,CAAgBC,cAAcN,MAAMO,GAAN,CAAUD,UAAV,CAA9B,CAAZ,EACNE,KADM,CACA,MAAM;AACXV,WAAGW,KAAH;AACA,cAAMC,MAAM,kDAAN,CAAN;AACD,OAJM,CAAP;AAKD,KAND,MAMO;AACLV,YAAMO,GAAN,CAAUZ,WAAV;AACD;AACF,GAbM,CAAP;AAcD;;AAED;AACA,SAASgB,uBAAT,GAAmC;AACjC,MAAI,EAAE,eAAe9B,MAAjB,CAAJ,EAA8B;AAAC,WAAO,IAAP;AAAa;AAC5C,SAAOY,UAAUG,IAAV,CAAeC,MAAM;AAC1B,UAAMC,KAAKD,GAAGE,WAAH,CAAe,aAAf,EAA8B,UAA9B,CAAX;AACA,UAAMC,QAAQF,GAAGG,WAAH,CAAe,aAAf,CAAd;AACA,WAAOD,MAAMY,MAAN,EAAP;AACD,GAJM,CAAP;AAKD;;AAED;AACA,SAASC,0BAAT,CAAoCC,EAApC,EAAwC;AACtC,MAAI,EAAE,eAAejC,MAAjB,CAAJ,EAA8B;AAAC,WAAO,IAAP;AAAa;AAC5C,SAAOY,UAAUG,IAAV,CAAeC,MAAM;AAC1B,UAAMC,KAAKD,GAAGE,WAAH,CAAe,aAAf,EAA8B,UAA9B,CAAX;AACA,UAAMC,QAAQF,GAAGG,WAAH,CAAe,aAAf,CAAd;AACA;AACA,WAAOD,MAAMe,GAAN,CAAUC,SAASF,EAAT,CAAV,CAAP;AACD,GALM,CAAP;AAMD","file":"idb.js","sourcesContent":["/*\n * IndexedDB\n */\n\n// Create the IndexedDB database.\nfunction createIndexedDB() {\n  // Checking for IndexedDB support.\n  if (!('indexedDB' in window)) {\n    console.log('[INFO] This browser doesn\\'t support IndexedDB.');\n    return null;\n  }\n  // Opening a database.\n  return idb.open('pwa-resto-db1', 3, function(upgradeDb) {\n    switch (upgradeDb.oldVersion) {\n      case 0:\n        // A placeholder case so that the switch block will\n        // execute when the database is first created\n        // (oldVersion is 0)\n      case 1:\n        // Creating object store for restaurants.\n        // A key path is a property that always exists and contains a unique\n        // value. Objects added to this store must have an id property and\n        // the value must be unique.\n        if (!upgradeDb.objectStoreNames.contains('restaurants')) {\n          console.log('[DEBUG] Creating a new object store for restaurants.');\n          const restaurantsOS =\n            upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\n        }\n      case 2:\n        // Creating object store for reviews.\n        if (!upgradeDb.objectStoreNames.contains('reviews')) {\n          console.log('[DEBUG] Creating a new object store for reviews.');\n          const restaurantsOS =\n            upgradeDb.createObjectStore('reviews', {keyPath: 'id'});\n        }\n    }\n  });\n}\n\n// Database object.\nconst dbPromise = createIndexedDB();\n\n/**\n * Write restaurants data to object store restaurants.\n * The saveRestaurantsDataLocally function takes an array of objects and adds\n * or updates each object to the IndexedDB database. The store.put operations\n * happen inside a Promise.all. This way if any of the put operations fail,\n * we can catch the error and abort the transaction. Aborting the transaction\n * rolls back all the changes that happened in the transaction so that if any\n * of the events fail to put, none of them will be added to the object store.\n */\nfunction saveRestaurantsDataLocally(restaurants) {\n  if (!('indexedDB' in window)) {return null;}\n  return dbPromise.then(db => {\n    const tx = db.transaction('restaurants', 'readwrite');\n    const store = tx.objectStore('restaurants');\n    // Don't use Promise.all when there's only one restaurant.\n    if (restaurants.length > 1) {\n      return Promise.all(restaurants.map(restaurant => store.put(restaurant)))\n      .catch(() => {\n        tx.abort();\n        throw Error('[ERROR] Restaurants were not added to the store.');\n      });\n    } else {\n      store.put(restaurants);\n    }\n  });\n}\n\n// Get restaurants data from object store restaurants.\nfunction getLocalRestaurantsData() {\n  if (!('indexedDB' in window)) {return null;}\n  return dbPromise.then(db => {\n    const tx = db.transaction('restaurants', 'readonly');\n    const store = tx.objectStore('restaurants');\n    return store.getAll();\n  });\n}\n\n// Get restaurant by id data from object store restaurants.\nfunction getLocalRestaurantByIdData(id) {\n  if (!('indexedDB' in window)) {return null;}\n  return dbPromise.then(db => {\n    const tx = db.transaction('restaurants', 'readonly');\n    const store = tx.objectStore('restaurants');\n    // Make sure you're using a number for id.\n    return store.get(parseInt(id));\n  });\n}\n"]}