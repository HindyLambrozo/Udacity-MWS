{"version":3,"sources":["app.js"],"names":["map","neighborhoods","cuisines","restaurants","markers","endpointRestaurants","elementGoogleMap","document","getElementById","elementNeighborhoodsSelect","elementCuisinesSelect","elementRestaurantsList","addEventListener","event","loadMainNetworkFirst","DBHelper","getServerData","then","dataFromNetwork","updateNeighborhoodsUI","updateCuisinesUI","saveRestaurantsDataLocally","setLastUpdated","Date","catch","err","console","warn","log","getLocalRestaurantsData","offlineData","length","result","allNeighborhoods","v","i","neighborhood","self","filter","indexOf","forEach","option","createElement","innerHTML","value","appendChild","allCuisines","cuisine_type","cuisine","refreshRestaurantsNetworkFirst","refreshRestaurantsUI","neighborhoodIndex","selectedIndex","cuisineIndex","m","setMap","r","restaurant","addRestaurantCardUI","addMarkersToMapUI","li","className","createResponsivePicture","divCardPrimary","name","divCardSecondary","address","divCardActions","more","href","getRestaurantURL","picture","sizes","srcsetWebP","getImageUrlForRestaurant","srcsetJPEG","sourceWebP","srcset","type","sourceDefault","defaultImg","imageSrc","src","altText","getAlternativeText","id","alt","window","initMap","loc","lat","lng","google","maps","Map","center","zoom","setTitle","iFrameGoogleMaps","querySelector","setAttribute","addListener","marker","addMarkerForRestaurant","location","url","push"],"mappings":"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","file":"app.js","sourcesContent":["/**\n * TODO: Add to Home Screen (aka Web App Install Banners)\n * trigger the Add to Home Screen prompt by using the beforeinstallprompt event.\n * https://developers.google.com/web/fundamentals/app-install-banners/\n */\n\n// Declare global variables.\nlet map;\nlet neighborhoods;\nlet cuisines;\nlet restaurants;\nlet markers = [];\nconst endpointRestaurants = `http://localhost:1337/restaurants`;\n\n// Declare the id elements.\nconst elementGoogleMap = document.getElementById('map');\nconst elementNeighborhoodsSelect = document.getElementById('neighborhoods-select');\nconst elementCuisinesSelect = document.getElementById('cuisines-select');\nconst elementRestaurantsList = document.getElementById('restaurants-list');\n\n\n/**\n * Start the following when the initial HTML document has been\n * completely loaded and parsed, without waiting for stylesheets, images,\n * and subframes to finish loading.\n * Fetch neighborhoods and cuisines.\n * https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  loadMainNetworkFirst();\n});\n\n/**\n * Fetch all neighborhoods and cuisines from network and fallback to IndexedDB,\n * update UI.\n * In loadMainNetworkFirst, once the server data is received, IndexedDB and\n * the page are updated. Then, when the data is successfully saved, a timestamp\n * is stored and the user is notified that the data is available for\n * offline use. If there is no network availability when this function is\n * called, then the getServerData function rejects and the catch method takes\n * over. In the catch call, the getLocalRestaurantsData function retrieves\n * local data from IndexedDB. If there isn't any local data saved, then\n * the user is alerted by messageNoData. Otherwise the local data is displayed\n * and a message informs the user that the data might be outdated.\n */\nconst loadMainNetworkFirst = () => {\n  DBHelper.getServerData(endpointRestaurants)\n  .then(dataFromNetwork => {\n    updateNeighborhoodsUI(dataFromNetwork);\n    updateCuisinesUI(dataFromNetwork);\n    saveRestaurantsDataLocally(dataFromNetwork)\n    .then(() => {\n      DBHelper.setLastUpdated(new Date());\n      // DBHelper.messageDataSaved();\n    }).catch(err => {\n      // DBHelper.messageSaveError();\n      console.warn(err);\n    });\n  }).catch(err => {\n    console.log('[DEBUG] Network requests have failed, this is expected if offline');\n    getLocalRestaurantsData()\n    .then(offlineData => {\n      if (!offlineData.length) {\n        // DBHelper.messageNoData();\n      } else {\n        // DBHelper.messageOffline();\n        updateNeighborhoodsUI(offlineData);\n        updateCuisinesUI(offlineData);\n      }\n    });\n  });\n}\n\n/**\n * Update UI of Neighborhoods select element.\n */\nconst updateNeighborhoodsUI = (result) => {\n  // Get all neighborhoods from all restaurants.\n  let allNeighborhoods = result.map((v, i) => result[i].neighborhood);\n  // Remove duplicates from neighborhoods and assign to global variable.\n  self.neighborhoods = allNeighborhoods.filter((v, i) => allNeighborhoods.indexOf(v) == i);\n  // Update the neighborhoods select.\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    elementNeighborhoodsSelect.appendChild(option);\n  });\n}\n\n/**\n * Update UI of Cuisines select element.\n */\nconst updateCuisinesUI = (result) => {\n  // Get all cuisines from all restaurants.\n  let allCuisines = result.map((v, i) => result[i].cuisine_type);\n  // Remove duplicates from cuisines and assign to global variable.\n  self.cuisines = allCuisines.filter((v, i) => allCuisines.indexOf(v) == i);\n  // Update the cuisines select.\n  cuisines.forEach(cuisine => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    elementCuisinesSelect.appendChild(option);\n  });\n}\n\n/**\n * Fetch all restaurants from network and fallback to IndexedDB, update UI.\n */\nconst refreshRestaurantsNetworkFirst = () => {\n  DBHelper.getServerData(endpointRestaurants)\n  .then(dataFromNetwork => {\n    refreshRestaurantsUI(dataFromNetwork);\n    saveRestaurantsDataLocally(dataFromNetwork)\n    .then(() => {\n      DBHelper.setLastUpdated(new Date());\n      // DBHelper.messageDataSaved();\n    }).catch(err => {\n      // DBHelper.messageSaveError();\n      console.warn(err);\n    });\n  }).catch(err => {\n    console.log('[DEBUG] Network requests have failed, this is expected if offline');\n    getLocalRestaurantsData()\n    .then(offlineData => {\n      if (!offlineData.length) {\n        // DBHelper.messageNoData();\n      } else {\n        // DBHelper.messageOffline();\n        refreshRestaurantsUI(offlineData);\n      }\n    });\n  });\n}\n\n/**\n * Update ul restaurants-list and markers on map for current restaurants.\n */\nconst refreshRestaurantsUI = (result) => {\n  // Retrieve the selected neighborhood and cuisine.\n  const neighborhoodIndex = elementNeighborhoodsSelect.selectedIndex;\n  const cuisineIndex = elementCuisinesSelect.selectedIndex;\n  const neighborhood = elementNeighborhoodsSelect[neighborhoodIndex].value;\n  const cuisine = elementCuisinesSelect[cuisineIndex].value;\n\n  // Clear ul restaurants-list and markers on map for current restaurants.\n  self.restaurants = [];\n  elementRestaurantsList.innerHTML = '';\n  markers.forEach(m => m.setMap(null));\n  markers = [];\n\n  // Filter the data by neighborhood and cuisine.\n  self.restaurants = result;\n  if (neighborhood != 'all') {\n    self.restaurants = self.restaurants.filter(r => r.neighborhood == neighborhood);\n  }\n  if (cuisine != 'all') {\n    self.restaurants = self.restaurants.filter(r => r.cuisine_type == cuisine);\n  }\n\n  // Create ul restaurants-list and add markers on map for current restaurants.\n  self.restaurants.forEach(restaurant => {\n    elementRestaurantsList.appendChild(addRestaurantCardUI(restaurant));\n  });\n  addMarkersToMapUI();\n}\n\n/**\n * Create a restaurant card in a li element.\n */\nconst addRestaurantCardUI = (restaurant) => {\n  const li = document.createElement('li');\n  li.className = 'restaurant-card';\n\n  li.appendChild(createResponsivePicture(restaurant));\n\n  // Create a div with class card-primary that contains h2, h3.\n  const divCardPrimary = document.createElement('div');\n  divCardPrimary.className = 'card-primary';\n  const name = document.createElement('h2');\n  name.className = 'card-title';\n  name.innerHTML = restaurant.name;\n  divCardPrimary.appendChild(name);\n  const neighborhood = document.createElement('h3');\n  neighborhood.className = 'card-subtitle';\n  neighborhood.innerHTML = restaurant.neighborhood;\n  divCardPrimary.appendChild(neighborhood);\n  li.appendChild(divCardPrimary);\n\n  // Create a div with class card-secondary that contains further content.\n  const divCardSecondary = document.createElement('div');\n  divCardSecondary.className = 'card-secondary';\n  // Use contact address element.\n  // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address\n  const address = document.createElement('address');\n  address.className = 'card-secondary-content';\n  address.innerHTML = restaurant.address;\n  divCardSecondary.appendChild(address);\n  li.appendChild(divCardSecondary);\n\n  // Create a div with class card-actions.\n  const divCardActions = document.createElement('div');\n  divCardActions.className = 'card-actions';\n  const more = document.createElement('a');\n  more.className = 'card-actions-link';\n  more.innerHTML = 'View Details';\n  more.href = DBHelper.getRestaurantURL(restaurant);\n  divCardActions.appendChild(more);\n  li.appendChild(divCardActions);\n\n  return li;\n}\n\n/**\n * Create a responsive image.\n *\n * Main page\n * 0 to 479px: card has width 100%, so 1 img 100% (455 x 321).\n * 480 to 599px: card has width 100%, so 1 img fullwidth (567 x 425).\n * 600 to 839px: card has width 45%, so 2 img 45% (378 x 283).\n * 840 to 959px: card has width 45%, so 2 img 45% (432 x 324).\n * 960 to 1279px: card has width 30%, so 3 img 30% (384 x 289).\n * 1280px to x: card has width 22.5%, so 4 img 22.5% (minimum 288 x 216).\n *\n * Restaurant Info\n * 0 to 479px: card has width 100%, so 1 img 100% (479 x 359).\n * 480 to 599px: card has width 100%, so 1 img fullwidth (599 x 449).\n * 600 to 839px: card has width 50%, so 1 img 50% (419.5 x 315).\n * 840 to 959px: card has width 50%, so 1 img 50% (479.5 x 360).\n * 960 to 1279px: card has width 50%, so 1 img 50% (639.5 x 480).\n * 1280px to x: card has width 50%, so 1 img 50% (minimum 640 x 480).\n *\n * Image breakpoints have been determined using the Cloudinary generator.\n * http://www.responsivebreakpoints.com/\n * Image widths are 300, 433, 552, 653, 752, 800\n *\n * The srcset attribute gives the browser the option to choose which file\n * to use. However, the browser has no way of determining the file sizes before\n * it loads them, so it always chooses the first image in the list.\n *\n * To load the correct image size based on the viewport width we need to tell\n * the browser how big each file is before it fetches them.\n * By adding a width descriptor to each file in the srcset, we are telling\n * the browser the width of each image in pixels before it fetches the image.\n * The browser can then use these widths to decide which image to fetch based\n * on its window size. It fetches the image with the smallest width that is\n * still larger than the viewport width.\n *\n * Because the CSS is parsed after the HTML at runtime, the browser has no way\n * to know what the final display size of the image will be when it fetches it.\n * Unless we tell it otherwise, the browser assumes the images will be displayed\n * at 100% of the viewport width and fetches the images based on this.\n *\n * The sizes value matches the image's max-width value in the CSS. The browser\n * now has everything it needs to choose the correct image version. The browser\n * knows its own viewport width and the pixel density of the user's device,\n * and we have given it the source files' dimensions (using width descriptor)\n * and the image sizes relative to the viewport (the sizes attribute).\n *\n * The media query tests the viewport width of the screen, and applies the CSS.\n * We can tell the browser about the media query in the sizes attribute so that\n * it fetches the correct image when the image changes size.\n *\n * We can use the <picture> element and the <source> element, in combination\n * with media queries, to change the image source as the window is resized.\n *\n * The <picture> element lets us define multiple source files using the\n * <source> tag. This is different than simply using an <img> tag with the\n * srcset attribute because the source tag lets us add things like media queries\n * to each set of sources. Instead of giving the browser the image sizes and\n * letting it decide which files to use, we can define the images to use at\n * each window size.\n *\n * If the user's browser doesn't support the <picture> element, it fetches\n * whatever is in the <img> element. The <picture> element is just used to\n * specify multiple sources for the <img> element contained in it. The <img>\n * element is what displays the image.\n *\n * Display density descriptors are great for fixed width images, but are\n * insufficient for flexible images.\n */\nconst createResponsivePicture = (restaurant) => {\n  const picture = document.createElement('picture');\n\n  // sizes: the browser ignores everything after the first matching condition.\n  const sizes = '(min-width: 80rem) 22.5vw, (min-width: 60rem) 30vw, (min-width: 37.5rem) 45vw, 100vw';\n\n  // srcset\n  const srcsetWebP =\n    `${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 300)} 300w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 433)} 433w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 552)} 552w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 653)} 653w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 752)} 752w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 800)} 800w`;\n\n  const srcsetJPEG =\n    `${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 300)} 300w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 433)} 433w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 552)} 552w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 653)} 653w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 752)} 752w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 800)} 800w`;\n\n  const sourceWebP = document.createElement('source');\n  sourceWebP.srcset = srcsetWebP;\n  sourceWebP.sizes = sizes;\n  sourceWebP.type = 'image/webp';\n  picture.appendChild(sourceWebP);\n\n  const sourceDefault = document.createElement('source');\n  sourceDefault.srcset = srcsetJPEG;\n  sourceDefault.sizes = sizes;\n  sourceDefault.type = 'image/jpeg';\n  picture.appendChild(sourceDefault);\n\n  const defaultImg = document.createElement('img');\n  // Get default image which should be width 800.\n  const imageSrc = DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 800);\n  defaultImg.src = imageSrc;\n\n  let altText = DBHelper.getAlternativeText(restaurant.id);\n  if (!altText) {\n    altText = `Restaurant ${restaurant.name}`;\n  }\n  defaultImg.alt = altText;\n  picture.appendChild(defaultImg);\n\n  return picture;\n}\n\n/**\n * Initialize Google map, called from HTML.\n * https://developers.google.com/maps/documentation/javascript/tutorial\n * https://developers.google.com/maps/documentation/javascript/tutorial#Loading_the_Maps_API\n */\nwindow.initMap = () => {\n  let loc = {lat: 40.722216, lng: -73.987501};\n  // Not using scrollwheel: False anymore, using default gestureHandling: auto\n  // https://developers.google.com/maps/documentation/javascript/interaction\n  // self.map = new google.maps.Map(elementGoogleMap, {\n  map = new google.maps.Map(elementGoogleMap, {\n    center: loc,\n    zoom: 12\n  });\n  // a11y - Frames must have non-empty title attribute\n  // https://dequeuniversity.com/rules/axe/2.2/frame-title\n  // https://developers.google.com/maps/documentation/javascript/events\n  let setTitle = () => {\n    const iFrameGoogleMaps = document.querySelector('#map iframe');\n    iFrameGoogleMaps.setAttribute('title', 'Google Maps overview of restaurants');\n  }\n  // self.map.addListener('tilesloaded', setTitle);\n  map.addListener('tilesloaded', setTitle);\n  // Refresh all restaurants.\n  refreshRestaurantsNetworkFirst();\n}\n\n/**\n * Add markers for current restaurants to the map.\n */\nconst addMarkersToMapUI = (restaurants = self.restaurants) => {\n  restaurants.forEach(restaurant => {\n    const marker = DBHelper.addMarkerForRestaurant(restaurant, self.map);\n    google.maps.event.addListener(marker, 'click', () => {\n      window.location.href = marker.url\n    });\n    markers.push(marker);\n  });\n}\n"]}